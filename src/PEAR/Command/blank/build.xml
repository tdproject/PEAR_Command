<?xml version="1.0"?>
<project name="[Namespace]_[Module]" default="deploy" basedir=".">
	<property file="${basedir}/build.properties"/>
	<property file="${basedir}/build.default.properties"/>
	<property file="${basedir}/build.${os}.properties"/>
	<property environment="env" />
	<property name="namespace" value="[Namespace]" />
	<property name="module" value="[Module]"/>
	<property name="codepool" value="[CodePool]"/>
	<property name="unique.name" value="${namespace}/${module}" />
	<property name="pear.dir" value="${basedir}/pear" />
	<property name="php-src.dir" value="${basedir}/src" />
	<property name="php-test.dir" value="${basedir}/tests" />
	<property name="tmp.dir" value="${basedir}/tmp" />
	<property name="magento-src.dir" value="${basedir}/magento-src" />
	<property name="php-test.dir" value="${basedir}/tests" />
	<property name="php-target.dir" value="${basedir}/target"/>
	<!-- ==================================================================== -->
	<!-- Cleans the directories with the generated source files				  -->
	<!-- ==================================================================== -->
	<target name="clean" description="Cleans almost everything, so use carefully.">
		<delete dir="${php-target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
	</target>
	<!-- ==================================================================== -->
	<!-- Prepares all the required directories								  -->
	<!-- ==================================================================== -->
	<target name="prepare" depends="clean" description="Prepares all the required directories.">
		<mkdir dir="${php-target.dir}" />
		<mkdir dir="${php-target.dir}/reports" />
		<mkdir dir="${php-target.dir}/reports/coverage" />
	</target>
	<!-- ==================================================================== -->
	<!-- Copies the sources to the target directory							  -->
	<!-- ==================================================================== -->
	<target name="copy" depends="prepare" description="Copies the sources to the target directory.">
		<copy
			tofile="${php-target.dir}/${unique.name}/app/code/${codepool}/${unique.name}/etc/config.xml"
			file="${php-src.dir}/app/code/${codepool}/${unique.name}/etc/config.xml">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		<copy todir="${php-target.dir}/${unique.name}">
			<fileset dir="${php-src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>   
        
        <!-- Create config helper class -->
        <antcall target="generate-config-helper" />
	</target>
	<!-- ==================================================================== -->
	<!-- Copies the sources to the deploy directory     					  -->
	<!-- ==================================================================== -->
	<target name="deploy" depends="copy" description="Copies the sources to the deploy and instance directories.">
		<copy todir="${dir.www}/${instance.dir}">
			<fileset dir="${php-target.dir}/${unique.name}">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${dir.www}/${deploy.dir}">
			<fileset dir="${php-target.dir}/${unique.name}">
				<include name="**"/>
			</fileset>
		</copy>
	</target>
    <!-- ==================================================================== -->
    <!-- Prepares the PEAR channel in the target directory, necessary for the -->
    <!-- packages this project is related                   				  -->
    <!-- ==================================================================== -->
    <target name="prepare-pear" depends="copy" description="Prepares the PEAR channel in the target directory, necessary for the packages this project is related.">
        <!-- initialize the PEAR directory -->
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="config-create" />
            <arg value="${php-target.dir}/" />
            <arg value=".pearrc" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="config-set" />
            <arg value="data_dir" />
            <arg value="pear/php/data" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="config-set" />
            <arg value="preferred_state" />
            <arg value="alpha" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="PEAR" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="Crypt_Blowfish-1.1.0RC2" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="channel-update" />
            <arg value="pear.php.net" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="channel-discover" />
            <arg value="connect.techdivision.com" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/PEAR_Command" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/PEAR_Installer_Role" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/TechDivision_AOP" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/TechDivision_XHProfPHPUnit" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/Mage" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/Mage_Core" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/Mage_Catalog" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.pear}">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="techdivision/Zend" />
        </exec>
    </target>
	<!-- ==================================================================== -->
	<!-- Copies the package definition file to the target directory and		  -->
	<!-- completes the contents node in package2.xml						  -->
	<!-- ==================================================================== -->
	<target name="pre-package" depends="prepare-pear" description="Copies the package definition file to the target directory.">
		<tstamp>  
		 	<format property="actual.date" pattern="yyyy-MM-dd" locale="en" />  
		</tstamp>
		<tstamp>  
		 	<format property="actual.time" pattern="hh:mm:ss" locale="en" />  
		</tstamp>
		<exec dir="${php-target.dir}/pear" executable="${php-target.dir}/pear/pear">
			<arg line="generate-contents -T ${pear.dir}/package2.xml -S ${php-target.dir}/${unique.name} -D ${php-target.dir} -M ${unique.name}"/>
		</exec>
        <copy tofile="${php-target.dir}/${unique.name}/package2.xml" file="${php-target.dir}/package2.xml">
        	<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Creates an abstract configuration helper class file for the module	  -->
	<!-- based on the configuration options defined in modules system.xml	  -->
	<!-- Will only run if property generate.confighelper is set to true,	  -->
	<!-- to avoid failing runs on modules which were created with older 	  -->
	<!-- versions of TechDivision/PEAR_Command								  -->
	<!-- ==================================================================== -->
	<target name="generate-config-helper" if="generator.flag.confighelper">
		<exec executable="${bin.pear}">
			<arg line="generate-config-helper -T ${basedir} -N ${namespace} -M ${module} -C ${codepool}"/>
		</exec>
	</target>
	
    <!-- ==================================================================== -->
    <!-- Generates the PEAR package                                           -->
    <!-- ==================================================================== -->
    <target name="create-package" depends="pre-package" description="Generates the PEAR package.">
        <exec dir="${php-target.dir}/${unique.name}" command="${php-target.dir}/pear/pear mage-package package2.xml"/>
    </target>
    <!-- ==================================================================== -->
    <!-- Generates the API documentation                                      -->
    <!-- ==================================================================== -->   
    <target name="apidoc" depends="prepare-pear" description="Generates the API documentation.">
         <exec dir="${dir.pear}" executable="${bin.pear.phpdoc}">  
            <arg line="-ct type -ue on -s on -t ${php-target.dir}/docs -o HTML:frames:earthli -d ${php-src.dir}"/>  
         </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the code sniffer and generates a report                         -->
    <!-- ==================================================================== -->
    <target name="phpcs" depends="apidoc" description="Runs the code sniffer and generates a report.">
        <exec executable="${bin.pear.phpcs}" output="${php-target.dir}/reports/checkstyle.xml">
            <arg line="--standard=ZEND --report=checkstyle ${php-src.dir}/app/code"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the copy and paste detection                                    -->
    <!-- ==================================================================== -->
    <target name="phpcpd" depends="phpcs" description="Runs the copy and paste detection.">
        <exec executable="${bin.pear.phpcpd}">
            <arg line="--log-pmd ${php-target.dir}/reports/pmd-cpd.xml ${php-src.dir}/app/code"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Generate phploc.csv                                                  -->
    <!-- ==================================================================== -->
    <target name="phploc" depends="phpcpd" description="Generate phploc.csv">
        <exec executable="${bin.pear.phploc}">
            <arg line="--log-xml ${php-target.dir}/reports/phploc.xml ${php-src.dir}"/>
        </exec>
     </target>
    <!-- ==================================================================== -->
    <!-- Runs the PHPDepend tool and generats a graphs                        -->
    <!-- ==================================================================== -->
    <target name="pdepend" depends="phploc" description="Runs the PHPDepend tool and generats a graphs.">
        <exec executable="${bin.pear.pdepend}">
            <arg line="--summary-xml=${php-target.dir}/reports/pdepend.xml --jdepend-xml=${php-target.dir}/reports/jdepend.xml --jdepend-chart=${php-target.dir}/reports/jdepend.svg --overview-pyramid=${php-target.dir}/reports/pdepend-pyramid.svg ${php-src.dir}" />
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the PHP mess detector tool                                      -->
    <!-- ==================================================================== -->
    <target name="phpmd" depends="pdepend" description="Runs the PHP Mess detector tool.">
        <exec executable="${bin.pear.phpmd}">
            <arg line="${php-src.dir}/app/code xml codesize,unusedcode --reportfile ${php-target.dir}/reports/pmd.xml" />
        </exec>
    </target>
	<!-- ==================================================================== -->
	<!-- Copies the test sources to the target directory					  -->
	<!-- ==================================================================== -->
	<target name="copy-tests" depends="phpmd" description="Copies the test sources to the target directory.">
		<copy todir="${php-target.dir}/${unique.name}">
			<fileset dir="${php-test.dir}">
				<include name="**/*" />
			</fileset>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
	
    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report                        -->
    <!-- ==================================================================== -->
    <target name="run-tests" depends="copy-tests" description="Runs the PHPUnit tests and generates a report.">
        <exec executable="${bin.pear.phpunit}" dir="${php-target.dir}/${unique.name}/app/code/${codepool}">
            <arg line="--log-junit ${php-target.dir}/reports/phpunit.xml --coverage-clover ${php-target.dir}/reports/coverage/clover.xml --coverage-html ${php-target.dir}/reports/coverage/ ./${namespace}/${module}/AllTests" />
        </exec>
    </target>
	
	<!-- ==================================================================== -->
	<!-- Runs the PHPUnit tests and generates a report						  -->
	<!-- ==================================================================== -->
	<target name="build" depends="run-tests" description="Runs the PHPUnit tests and generates a report.">
		<!-- add Hudson build here -->
	</target>
	
	<!-- ==================================================================== -->
	<!-- Extracts the Magento sources to the magento-src directory			  -->
	<!-- ==================================================================== -->
   	<target name="init" description="Extracts the Magento sources to the magento-src directory." depends="prepare-instance-file">
    	<delete dir="${magento-src.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
		<mkdir dir="${magento-src.dir}"/>
		<antcall target="get-magento-src" />
		<exec dir="${dir.www}/${instance.base.dir.tmp}" executable="${bin.extract}">
        	<arg line="${bin.extract.args}"/>
			<arg line="${dir.www}/${instance.base.dir.tmp}/${dl}"/>
		</exec>
		<move todir="${magento-src.dir}">
        	<fileset dir="${dir.www}/${instance.base.dir.tmp}/magento"/>
		</move>
	</target>

	<!-- ==================================================================== -->
	<!-- Initializing a magento instance for testing purpose   			 	  -->
	<!-- ==================================================================== -->
	<target name="init-instance" description="Creats a magento instance for testing purpose" depends="prepare-instance-file">
		<echo message="Preparing magento ${magento.edition} source..."/>
		<antcall target="get-magento-src" />
		<delete dir="${basedir}/instance-src" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
		<delete dir="${dir.www}/${instance.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
		<exec dir="${dir.www}/${instance.base.dir.tmp}" executable="${bin.extract}">
			<arg line="${bin.extract.args}"/>
			<arg line="${dir.www}/${instance.base.dir.tmp}/${dl}"/>
		</exec>
		<move todir="${dir.www}/${instance.dir}">
			<fileset dir="${dir.www}/${instance.base.dir.tmp}/magento"/>
		</move>
		<echo message="Initialize database ${mysql.database}..." />
		<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'DROP DATABASE IF EXISTS ${mysql.database};create database ${mysql.database}'"/>
		</exec>
		<antcall target="finalize-instance-installation"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Finalize installation of magento instance			   			 	  -->
	<!-- ==================================================================== -->
	<target name="finalize-instance-installation">
		<echo message="Installing instance ${instance.url}..." />
		<exec dir="${dir.www}/${instance.dir}" executable="${bin.php}">
			<arg line="-f install.php --
				--license_agreement_accepted yes
				--locale de_DE
				--timezone 'Europe/Berlin'
				--default_currency EUR
				--db_host '${mysql.host}'
				--db_name ${mysql.database}
				--db_user ${mysql.username}
				--db_pass ${mysql.password}
				--url 'http://${instance.url}'
				--secure_base_url 'https://${instance.url}'
				--use_rewrites yes
				--skip_url_validation no
				--use_secure yes
				--use_secure_admin yes
				--admin_lastname ${namespace}
				--admin_firstname ${module}
				--admin_email 'admin@${instance.base.url}.com'
				--admin_username admin
				--admin_password eraZor00
			"/>
		</exec>
		<echo message="Finalize instance for development mode..." />
		<exec executable="${bin.mysql}">
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'USE ${mysql.database};
				CREATE TABLE IF NOT EXISTS core_cache_option (value tinyint(3) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;
				UPDATE core_cache_option SET value = 0;
				INSERT INTO core_config_data (scope, scope_id, path, value) VALUES
					(&quot;default&quot;, 0, &quot;dev/log/active&quot;, &quot;1&quot;),
					(&quot;default&quot;, 0, &quot;dev/log/file&quot;, &quot;system.log&quot;),
					(&quot;default&quot;, 0, &quot;dev/log/exception_file&quot;, &quot;exception.log&quot;),
					(&quot;default&quot;, 0, &quot;cataloginventory/options/show_out_of_stock&quot;, &quot;1&quot;),
					(&quot;default&quot;, 0, &quot;advanced/modules_disable_output/Mage_AdminNotification&quot;, &quot;1&quot;)'"/>
		</exec>
		<delete file="${dir.www}/${instance.dir}/app/etc/use_cache.ser" />
		<exec executable="/bin/ln" >
			<arg value="-s"/>
			<arg value="${dir.www}/${instance.dir}"/>
			<arg value="${basedir}/instance-src"/>
		</exec>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Set the download file variable	depending on configured prefix		  -->
	<!-- ==================================================================== -->
	<target name="prepare-instance-file">
		<taskdef resource="net/sf/antcontrib/antlib.xml"/>
		<if>
			<isset property="magento.edition.prefix"/>
			<then>
				<var name="dl" value="${magento.edition.prefix}-magento-${magento.edition}-${magento.version}.tar.gz"/>
			</then>
			<else>
				<var name="dl" value="magento-${magento.edition}-${magento.version}.tar.gz"/>
			</else>
		</if>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Check if Magento Source Package has been downloaded yet  		 	  -->
	<!-- ==================================================================== -->
	<target name="check-magento-exists">
	    <available file="${dir.www}/${instance.base.dir.tmp}/${dl}" property="magento-src.present"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Get Magento Source Package by given version number		  		 	  -->
	<!-- ==================================================================== -->
	<target name="get-magento-src" depends="check-magento-exists" unless="magento-src.present">
		<echo message="Downloading magento ${magento.edition} v${magento.version}..."/>
		<mkdir dir="${dir.www}/${instance.base.dir.tmp}" />
		<get src="${instance.download.url}/${dl}" dest="${dir.www}/${instance.base.dir.tmp}/${dl}"/>
	</target>

    <!-- ==================================================================== -->
    <!-- Upload current release version to PEAR Channel		  		 	  	  -->
    <!-- ==================================================================== -->
    <target name="upload-release" >
        <echo message="Releasing ${namespace}_${module}-${release.version} on ${pear.channel.url}..."/>
        <exec executable="${bin.curl}" outputproperty="exec.response">
            <arg line='-d "login=Submit&amp;password=${pear.channel.password}&amp;user=${pear.channel.username}" --cookie-jar /tmp/cookieCurl -s ${pear.channel.url}/admin.php' />
        </exec>
        <exec executable="${bin.curl}" outputproperty="exec.response">
            <arg line='-F release=@"${php-target.dir}/${unique.name}/${namespace}_${module}-${release.version}.tgz" -F submitted=1 -F f=0 -F filename="${php-target.dir}/${unique.name}/${namespace}_${module}-${release.version}.tgz" -F createpackage=1 -F createuser=1 --cookie /tmp/cookieCurl ${pear.channel.url}/admin.php'></arg>
        </exec>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Release new patch version      	  		 	  					  -->
    <!-- ==================================================================== -->
    <target name="version-release" >
        <taskdef resource="net/sf/antcontrib/antlib.xml"/>
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
        <input message="Please enter changelog for v${release.version}:" addproperty="release.changelog" defaultvalue="- New release version"/>
        <tstamp>
		 	<format property="actual.date" pattern="yyyy-MM-dd" locale="en" />
		 	<format property="actual.time" pattern="hh:mm:ss" locale="en" />
		</tstamp>
        <xmltask source="${pear.dir}/package2.xml" dest="${pear.dir}/package2.xml">
            <replace path="/:package/:notes/text()" withXml="${release.changelog}"/>
            <insert path="/*[local-name()='package']/*[local-name()='changelog']/*[local-name()='release'][1]" position="before">
              <![CDATA[
                <release>
            <version>
                <release>${release.version}</release>
                <api>${api.version}</api>
            </version>
            <stability>
                <release>${release.stability}</release>
                <api>${api.stability}</api>
            </stability>
            <date>${actual.date}</date>
            <license uri="http://www.opensource.org/licenses/osl-3.0.php">OSL 3.0</license>
            <notes>
            	version-release: ${release.changelog}
            </notes>
        </release>]]>
            </insert>
        </xmltask>
        <antcall target="create-package"/>
        <antcall target="upload-release"/>
        <echo message="${namespace}_${module} v${release.version} released." />
    </target>
	
	<!-- ====================================================================== -->
	<!-- Download instance dump and init current instance with data from backup	-->
	<!-- ======================================================================	-->
	<target name="init-full-backup" description="Update magento instance with data from backup files">
		<fail message="Missing property instance.id" unless="instance.id"/>
		<fail message="Missing property instance.backup.date" unless="instance.backup.date"/>
		<antcall target="init-filesystem-backup" />
		<antcall target="init-database-backup" />
	</target>
	
	<!-- ====================================================================== -->
	<!-- Download file system backup and update instance files					-->
	<!-- ======================================================================	-->
	<target name="init-filesystem-backup" description="Replace instance files with data from backup file">
		<fail message="Missing property instance.id" unless="instance.id"/>
		<fail message="Missing property instance.backup.date" unless="instance.backup.date"/>
		<echo message="Preparing file system backup..."/>
		<antcall target="get-fs-backup" />
		<mkdir dir="${dir.www}/${instance.base.dir.tmp}/${instance.id}" />
		<echo message="Deleting instance files from ${dir.www}/${instance.dir}..."/>
		<delete dir="${dir.www}/${instance.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true" excludes="**/local.xml"/>
		<echo message="Extracting backup file ${instance.backup.file.fs}..."/>
		<exec dir="${dir.www}/${instance.base.dir.tmp}/${instance.id}" executable="${bin.extract}">
			<arg line="${bin.extract.args}"/>
			<arg line="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.fs}"/>
		</exec>
		<move todir="${dir.www}/${instance.dir}" verbose="false">
			<fileset dir="${dir.www}/${instance.base.dir.tmp}/${instance.id}">
				<exclude name="**/local.xml"/>
			</fileset>
		</move>
	</target>
	
	<!-- ====================================================================== -->
	<!-- Download database dump and import data from dump to instance database	-->
	<!-- ======================================================================	-->
	<target name="init-database-backup" description="Import data from sql dump to instance database">
		<fail message="Missing property instance.id" unless="instance.id"/>
		<fail message="Missing property instance.backup.date" unless="instance.backup.date"/>
		<echo message="Preparing database backup..."/>
		<antcall target="get-mysql-backup" />
		<!-- database dump -->
		<echo message="Extracting backup file ${instance.backup.file.mysql}..."/>
		<exec dir="${dir.www}/${instance.base.dir.tmp}" executable="${bin.extract}">
			<arg line="${bin.extract.args}"/>
			<arg line="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.mysql}"/>
		</exec>
		<echo message="Importing database dump into ${mysql.database}..."/>
		<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'DROP DATABASE IF EXISTS ${mysql.database};create database ${mysql.database};'"/>
		</exec>
		<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'USE ${mysql.database}; SOURCE ${dir.www}/${instance.base.dir.tmp}/${instance.id}-mysql-${instance.backup.date}.sql;'"/>
		</exec>
		<!-- update instance URLs -->
       	<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'USE ${mysql.database}; UPDATE `${mysql.database}`.`core_config_data` SET `value` = &quot;http://${instance.url}&quot; WHERE `core_config_data`.`path` = &quot;web/unsecure/base_url&quot; OR `core_config_data`.`path`= &quot;web/secure/base_url&quot;;'"/>
		</exec>
		<!-- reset base link URLs -->
       	<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'USE ${mysql.database}; UPDATE `${mysql.database}`.`core_config_data` SET `value` = &quot;http://${instance.url}&quot; WHERE `core_config_data`.`path` = &quot;web/unsecure/base_link_url&quot; OR `core_config_data`.`path`= &quot;web/secure/base_link_url&quot;;'"/>
		</exec>
		<!-- reset use rewrite and combine js & css setting -->
       	<exec executable="${bin.mysql}">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'USE ${mysql.database}; UPDATE `${mysql.database}`.`core_config_data` SET `value` = 0 WHERE `core_config_data`.`path` = &quot;web/seo/use_rewrites&quot; OR `core_config_data`.`path`= &quot;dev/js/merge_files&quot; OR `core_config_data`.`path`= &quot;dev/css/merge_css_files&quot;;'"/>
		</exec>
		<echo message="Database import finished! CHECK YOUR LOCAL SYSTEM CONFIGURATION!"/>
		<echo message="1. DISABLE TRACKING OR CHANGE LIVE TRACKING SETTINGS!"/>
		<echo message="2. REBUILD INDEXES!"/>
		<echo message="3. Enable SSL if available!"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Check if instance backup file has been downloaded yet  		 	  -->
	<!-- ==================================================================== -->
	<target name="check-fs-backup-exists">
	    <available file="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.fs}" property="fs-backup.present"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Get instance backup file from ftp						  		 	  -->
	<!-- ==================================================================== -->
	<target name="get-fs-backup" depends="check-fs-backup-exists" unless="fs-backup.present">
		<echo message="Downloading instance backup file ${instance.backup.file.fs}..."/>
		<mkdir dir="${dir.www}/${instance.base.dir.tmp}" />
		<get src="${instance.backup.url}/${instance.id}/${instance.backup.file.fs}" dest="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.fs}"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Check if database backup file has been downloaded yet  		 	  -->
	<!-- ==================================================================== -->
	<target name="check-mysql-backup-exists">
	    <available file="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.mysql}" property="mysql-backup.present"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Get database backup file from ftp						  		 	  -->
	<!-- ==================================================================== -->
	<target name="get-mysql-backup">
		<echo message="Downloading database backup file ${instance.backup.file.mysql}..."/>
		<mkdir dir="${dir.www}/${instance.base.dir.tmp}" />
		<get src="${instance.backup.url}/${instance.id}/${instance.backup.file.mysql}" dest="${dir.www}/${instance.base.dir.tmp}/${instance.backup.file.mysql}" ignoreerrors="true"/>
	</target>
</project>